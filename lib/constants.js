'use strict';

// Imports
const path = require('path');
const pkg = require('../package.json');
const {Alias, AliasDefault, AliasSpec, AliasSpecDefault, AliasUnknown} = require('./alias');
const {PR_LOCAL_BRANCH_PREFIX, PR_REMOTE_ALIAS_PREFIX} = require('./alias-scripts/gcoghpr');
const utils = require('./utils');

// Constants
const VERSION_STAMP = `${pkg.name} v${pkg.version}`;
const ROOT_DIR = path.resolve(__dirname, '..');
const BIN_DIR = path.join(ROOT_DIR, 'bin');
const SOURCE_NVM_CMD = '. $NVM_DIR/nvm.sh';
const GLOBAL_NPM_PACKAGES = [
  '@angular/cli',
  '@gkalpak/aliases',
  '@gkalpak/cli-utils',
  '@gkalpak/ng-maintain',
  'csslint',
  'eslint',
  'firebase-tools',
  'grunt-cli',
  'gulp-cli',
  'http-server',
  'light-server',
  'shx',
  'typescript',
  'typescript-run',
  'watch',
  'yarn',
];

const DESC_REPLACEMENTS = {
  [AliasUnknown.DESCRIPTION]: '???',
  '::__a-builds-dir': '(<.../angular/aio/aio-builds-setup>)',
  '::__g-pick-branch --gkcu-returnOutput=1': '(interactively pick a branch)',
  '::__g-pick-commit --gkcu-returnOutput=1': '(interactively pick a commit)',
};

const DEF_CODE = AliasSpecDefault.DEF_CODE = (cmd, cfg = {}) => utils.stripIndentation(`
  #!/usr/bin/env node
  'use strict';
  // eslint-disable-next-line max-len
  const cmd = module.exports = '${cmd.replace(/'/g, '\\\'')}';
  if (require.main === module) {
    const {commandUtils} = require('@gkalpak/cli-utils');
    const {onError} = require('../../lib/utils');
    const {args, config} = commandUtils.preprocessArgs(process.argv.slice(2));
    // eslint-disable-next-line quotes
    commandUtils.run(cmd, args, Object.assign(${JSON.stringify(cfg)}, config)).catch(onError);
  }
`);

const CFGGIT_SPEC_WITH_CRED_HELPER = credHelper => new AliasSpec(
  utils.stripIndentation(`
    #!/usr/bin/env node
    'use strict';
    const utils = require('../../lib/utils');
    console.log(utils.stripIndentation(\`
      ### [Generated by: ${VERSION_STAMP}]
      ### Run the following commands:

      git config --global core.editor "vim"
      git config --global credential.helper "${credHelper}"
      git config --global merge.tool "kdiff3"
      git config --global mergetool.kdiff3.path "/path/to/kdiff3"
      git config --global mergetool.kdiff3.trustExitCode "false"
      git config --global push.default "upstream"
      git config --global rebase.autosquash "true"
      git config --global rebase.autostash "true"
      git config --global user.email "kalpakas.g@gmail.com"
      git config --global user.name "George Kalpakas"
    \`));
  `),
  'Show configuration instructions for `git`.');

const SCRIPT_BACKED_CODE = (scriptName, desc) => utils.stripIndentation(`
  #!/usr/bin/env node
  'use strict';
  module.exports = '${desc.replace(/'/g, '\\\'')}';
  if (require.main === module) {
    const {commandUtils} = require('@gkalpak/cli-utils');
    const {onError} = require('../../lib/utils');
    const {args, config} = commandUtils.preprocessArgs(process.argv.slice(2));

    const {main} = require('../../lib/alias-scripts/${scriptName}');
    main(args, config).catch(onError);
  }
`);

const SCRIPT_BACKED_ALIAS = (scriptName, desc) => {
  const code = SCRIPT_BACKED_CODE(scriptName, desc);
  return new Alias(new AliasSpec(code, desc));
};

// NOTE 1: Node.js commands that are directly evaluated in a *nix shell should not contain backticks (`` ` ``).
// NOTE 2: Node.js commands that are directly evaluated in a *nix shell should have any dollar-signs (`$`) excaped.
// NOTE 3: Due to how thsi code is used, excaped characters need to be double-escaped (`\\\\`).
// NOTE 4: The above notes should be also taken into account for the passed in strings used directly in the command.
const CLEANUP_CODE = (desc, prefix, listCmd, deleteCmd) =>
  'node --eval "' +
    `console.log('Clean up ${desc} starting with \\\\'${prefix}\\\\'.'); ` +
    'const exec = child_process.execSync; ' +
    `exec('${listCmd}', {encoding: 'utf8'}).` +
      'split(\'\\\\n\').' +
      'map(x => x.trim()).' +
      `filter(x => x.startsWith('${prefix}')).` +
      `forEach(x => (console.log('  Deleting \\\\'' + x + '\\\\'...'), exec('${deleteCmd} ' + x)));` +
  '"';

// NOTE 1: Node.js commands that are directly evaluated in a *nix shell should not contain backticks (`` ` ``).
// NOTE 2: Node.js commands that are directly evaluated in a *nix shell should have any dollar-signs (`$`) excaped.
// NOTE 3: Due to how thsi code is used, excaped characters need to be double-escaped (`\\\\`).
// NOTE 4: The above notes should be also taken into account for the passed in strings used directly in the command.
const GET_LATEST_VERSION_CODE = repoSlug =>
  'new Promise((resolve, reject) => require(\'https\').' +
    `get('https://api.github.com/repos/${repoSlug}/tags?per_page=1', {headers: {'User-Agent': 'Node.js'}}, res => { ` +
      'let responseText = \'\'; ' +
      'res.' +
        'on(\'data\', d => responseText += d).' +
        'on(\'error\', reject).' +
        'on(\'end\', () => resolve(JSON.parse(responseText)[0].name.replace(/^v/, \'\'))); ' +
    '}).' +
    'on(\'error\', reject).' +
    'end())';

// NOTE 1: Node.js commands that are directly evaluated in a *nix shell should not contain backticks (`` ` ``).
// NOTE 2: Node.js commands that are directly evaluated in a *nix shell should have any dollar-signs (`$`) excaped.
// NOTE 3: Due to how thsi code is used, excaped characters need to be double-escaped (`\\\\`).
// NOTE 4: The above notes should be also taken into account for the passed in strings used directly in the command.
const PRINT_NVM_UPDATE_INSTRUCTIONS_CODE = (currentVersionCmd, repoSlug, fullInstructionsHash, instructionsTmpl) =>
  'node --eval "/* NVM update instructions */ ' +
    '(async () => { ' +
      'try { ' +
        'const currentVersion = require(\'child_process\').' +
          `execSync('${currentVersionCmd}', {encoding: 'utf8', shell: true}).` +
          'trim(); ' +
        `const latestVersion = await ${GET_LATEST_VERSION_CODE(repoSlug)}; ` +
        'const message = (currentVersion === latestVersion) ? \'Already up to date.\' : \'Update available.\'; ' +
        `const escapedInstructionsTmpl = '${instructionsTmpl.replace(/'/g, '\\\\$&')}'; ` +
        'console.log(\'Current version: \' + currentVersion); ' +
        'console.log(\'Latest version:  \' + latestVersion); ' +
        'console.log(\'\\\\n  \' + message); ' +
        `console.log('\\\\nUpdate instructions (https://github.com/${repoSlug}#${fullInstructionsHash}):'); ` +
        'console.log(\'  \' + escapedInstructionsTmpl.split(\'{{version}}\').join(latestVersion)); ' +
      '} catch (err) { ' +
        'console.error(\'ERROR:\', err); ' +
        'process.exit(1); ' +
      '} ' +
    '})();' +
  '"';

// NOTE 1: Node.js commands that are directly evaluated in a *nix shell should not contain backticks (`` ` ``).
// NOTE 2: Node.js commands that are directly evaluated in a *nix shell should have any dollar-signs (`$`) excaped.
// NOTE 3: Due to how thsi code is used, excaped characters need to be double-escaped (`\\\\`).
// NOTE 4: The above notes should be also taken into account for the passed in strings used directly in the command.
const UPDATE_DEPS_CODE = (updateCmd, depsProp) =>
  `node --eval "/* Update ${depsProp}. */ ` +
    `const deps = Object.keys(require('./package.json').${depsProp} || {}).map(x => x + '@latest'); ` +
    `console.log('\\\\nUpdating ' + deps.length + ' ${depsProp}...'); ` +
    `deps.length && child_process.spawnSync('${updateCmd}', deps, {shell: true, stdio: 'inherit'});` +
  '"';
let nupCode, nudCode, yupCode, yudCode;

const ALIASES = {
  // Git
  git: {
    // STATUS
    gs: new AliasDefault('git status $*'),
    gl: new AliasDefault('git log --decorate $* || true'),
    gl1: new AliasDefault('git log --decorate --oneline $* || true'),
    gl1g: new AliasDefault('git log --decorate --oneline | grep $*'),
    gsh: new AliasDefault('git show ${*:::__g-pick-commit --gkcu-returnOutput=1}'),
    gshn: new AliasDefault('git show --name-only ${*:::__g-pick-commit --gkcu-returnOutput=1}'),
    gd: new AliasDefault('ngm-diff-wh $*'),
    gdn: new AliasDefault('ngm-diff-wh --name-only $*'),
    gdh: new AliasDefault('ngm-diff-wh HEAD $*'),
    gdnh: new AliasDefault('ngm-diff-wh HEAD --name-only $*'),
    gd1: new AliasDefault('ngm-diff-wh HEAD~1 $*'),
    gdn1: new AliasDefault('ngm-diff-wh HEAD~1 --name-only $*'),

    // STASH
    gst: new AliasDefault('git stash $*'),
    gstk: new AliasDefault('git stash save --keep-index $*'),
    gstl: new AliasDefault('git stash list $*'),
    gstp: new AliasDefault('git stash pop --index $*'),

    // CHECKOUT
    gco: new AliasDefault('git checkout ${*:::__g-pick-branch --gkcu-returnOutput=1}'),
    gcom: new AliasDefault('git checkout master $*'),
    gcopr: new AliasDefault('git fetch upstream pull/$1/head && git checkout FETCH_HEAD'),
    gcoghpr: SCRIPT_BACKED_ALIAS('gcoghpr', 'Check out a GitHub pull request as a local branch.'),
    'gcoghpr-cleanup': new AliasDefault(
      CLEANUP_CODE('git branches', `${PR_LOCAL_BRANCH_PREFIX}-`, 'git branch', 'git branch --delete --force') +
      ' && ' +
      CLEANUP_CODE('git remotes', `${PR_REMOTE_ALIAS_PREFIX}-`, 'git remote show', 'git remote remove')),

    // ADD / COMMIT
    gaa: new AliasDefault('git add --all $*'),
    gcm: new AliasDefault('git commit --all $*'),
    gcmi: new AliasDefault('git commit $*'),
    gcmf: new AliasDefault('git commit --all --fixup HEAD~${1:0} $2*'),
    gcmif: new AliasDefault('git commit --fixup HEAD~${1:0} $2*'),
    gcmfc: new AliasDefault('git commit --all --fixup ${0:::__g-pick-commit --gkcu-returnOutput=1} $*'),
    gcmifc: new AliasDefault('git commit --fixup ${0:::__g-pick-commit --gkcu-returnOutput=1} $*'),
    gcmfs: new AliasDefault('git commit --all --fixup :/$1 $2*'),
    gcmifs: new AliasDefault('git commit --fixup :/$1 $2*'),
    gcma: new AliasDefault('git commit --all --amend $*'),
    gcmia: new AliasDefault('git commit --amend $*'),
    gcmane: new AliasDefault('git commit --all --amend --no-edit $*'),
    gcmiane: new AliasDefault('git commit --amend --no-edit $*'),

    // RESET
    grs: new AliasDefault('git reset $*'),
    grs1: new AliasDefault('git reset $* @~1'),

    // PUSH
    gp: new AliasDefault('git push --verbose $*'),
    gp1: new AliasDefault('git push --set-upstream --verbose $2* origin ${1:::git rev-parse --abbrev-ref HEAD}'),
    gpf: new AliasDefault('git push --force-with-lease --verbose $*'),


    // BRANCH
    gb: new AliasDefault('git branch $*'),
    gbc: new AliasDefault(
      'git checkout ${2:HEAD} -b $1 && git config branch.$1.remote origin && git config branch.$1.merge refs/heads/$1'),
    gbcm: new AliasDefault(
      'git checkout master -b $1 && git config branch.$1.remote origin && git config branch.$1.merge refs/heads/$1'),
    gbd: new AliasDefault('git branch --delete --force ${*:::__g-pick-branch --gkcu-returnOutput=1}'),

    // PULL(-REBASE)
    gpr: new AliasDefault('git pull --rebase $*'),
    gpro: new AliasDefault('git pull --rebase origin ${*:::git rev-parse --abbrev-ref HEAD}'),
    gprom: new AliasDefault('git pull --rebase origin master $*'),
    gpru: new AliasDefault('git pull --rebase upstream ${*:::git rev-parse --abbrev-ref HEAD}'),
    gprum: new AliasDefault('git pull --rebase upstream master $*'),

    // SYNC MASTER
    gsync: new AliasDefault('git checkout ${1:master} && git pull upstream ${1:master} && git push origin ${1:master}'),


    // REBASE
    grb: new AliasDefault('git rebase ${*:::__g-pick-branch --gkcu-returnOutput=1}'),
    grbm: new AliasDefault('git rebase --ignore-date master $*'),
    grbi: new AliasDefault('git rebase --interactive HEAD~$1'),
    grbia: new AliasDefault('git rebase --autosquash --interactive HEAD~$1'),
    grbin: new AliasDefault('git rebase --no-autosquash --interactive HEAD~$1'),
    grbc: new AliasDefault('git rebase --continue'),
    grba: new AliasDefault('git rebase --abort'),
    gmt: new AliasDefault('git mergetool'),
    gcl: new AliasDefault('git clean --interactive "${0:::git rev-parse --show-toplevel}"'),


    // MERGE NG PR
    gngprh: new AliasDefault('ngm-pr-merge $* --instructions'),
    gngprm: new AliasDefault('ngm-pr-merge $*'),

    // BACKPORT
    gcp: new AliasDefault('git cherry-pick $*'),
    gcpc: new AliasDefault('git cherry-pick --continue'),
    gcpa: new AliasDefault('git cherry-pick --abort'),
    gcpx: new AliasDefault(utils.stripIndentation(`
      echo "  Cherry-picking SHA: $1  " &&
      echo "----------------------------------------------------------------" &&
      echo "                                                                " &&
      git checkout \${2:::__g-pick-branch --gkcu-returnOutput=1} &&
      git pull --rebase origin \${2:::__g-pick-branch --gkcu-returnOutput=1} &&
      git cherry-pick $1 &&
      ngm-diff-wh origin/\${2:::__g-pick-branch --gkcu-returnOutput=1} &&
      (git log --decorate || true) &&
      echo "                                                                " &&
      echo "----------------------------------------------------------------" &&
      echo "     >>>  (Don't forget to manually push the changes.)  <<<     "
    `).replace(/\r?\n/g, ' ')),
    gcpxl: new AliasDefault('gcpx ${0:::git rev-parse HEAD} $*'),


    // PRIVATE
    '__g-pick-branch': SCRIPT_BACKED_ALIAS('g-pick-branch', '[PRIVATE]: Pick one from a list of branches.'),
    '__g-pick-commit': SCRIPT_BACKED_ALIAS('g-pick-commit', '[PRIVATE]: Pick one from a list of commits.'),
  },

  // Node.js
  node: {
    // INFO / SWITCHING
    nv: new AliasDefault('node --version'),
    nls: new AliasDefault('npm list --depth=0 $*'),
    nls1: new AliasDefault('npm list --depth=1 $*'),
    nlsg: new AliasDefault('npm list --depth=0 --global $*'),
    nlsg1: new AliasDefault('npm list --depth=1 --global $*'),
    yls: new AliasDefault('yarn list --depth=0 $*'),
    yls1: new AliasDefault('yarn list --depth=1 $*'),
    ylsg: new AliasDefault('yarn global list --depth=0 $*'),
    ylsg1: new AliasDefault('yarn global list --depth=1 $*'),
    nvls: new Alias({
      default: new AliasSpecDefault(`${SOURCE_NVM_CMD} && nvm use \${0:::node --version} --silent && nvm list $*`),
      win32: new AliasSpecDefault('nvm list $*'),
    }),
    nvlsa: new Alias({
      default:
        new AliasSpecDefault(`${SOURCE_NVM_CMD} && nvm use \${0:::node --version} --silent && nvm list-remote $*`),
      win32: new AliasSpecDefault('nvm list available $*'),
    }),
    nvu: new Alias({
      default: new AliasSpec(
        SCRIPT_BACKED_CODE('nvu', 'nvm use $*'),
        `${SOURCE_NVM_CMD} && nvm use $* (it does not affect the currect process)`),
      win32: new AliasSpec(
        SCRIPT_BACKED_CODE('nvu', 'nvm use $*'),
        'nvm use $* (the 1st arg is replaced with the latest available version on the specified branch)'),
    }),
    nvmup: new Alias({
      default: new AliasSpecDefault(
        PRINT_NVM_UPDATE_INSTRUCTIONS_CODE(
          `${SOURCE_NVM_CMD} && nvm --version`,
          'nvm-sh/nvm',
          'install--update-script',
          'Run: \'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{version}}/install.sh | bash\' ' +
            '(or \'wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v{{version}}/install.sh | bash\')',
        ),
      ),
      win32: new AliasSpecDefault(
        PRINT_NVM_UPDATE_INSTRUCTIONS_CODE(
          'nvm version',
          'coreybutler/nvm-windows',
          'installation--upgrades',
          'Download, unzip and run: ' +
            'https://github.com/coreybutler/nvm-windows/releases/download/{{version}}/nvm-setup.zip',
        ),
      ),
    }),


    // INSTALL / UNINSTALL
    nap: new AliasDefault('npm install $* --save'),
    nad: new AliasDefault('npm install $* --save-dev'),
    nrp: new AliasDefault('npm remove $* --save'),
    nrd: new AliasDefault('npm remove $* --save-dev'),
    yap: new AliasDefault('yarn add $*'),
    yad: new AliasDefault('yarn add $* --dev'),
    yrp: new AliasDefault('yarn remove $*'),
    yrd: new AliasDefault('yarn remove $* --dev'),


    // UPDATE DEPENDENCIES
    nup: new AliasDefault(nupCode = UPDATE_DEPS_CODE('nap', 'dependencies')),
    nud: new AliasDefault(nudCode = UPDATE_DEPS_CODE('nad', 'devDependencies')),
    nua: new AliasDefault(`${nupCode} && ${nudCode}`),
    yup: new AliasDefault(yupCode = UPDATE_DEPS_CODE('yap', 'dependencies')),
    yud: new AliasDefault(yudCode = UPDATE_DEPS_CODE('yad', 'devDependencies')),
    yua: new AliasDefault(`${yupCode} && ${yudCode}`),


    // RUN / TEST
    nr: new AliasDefault('npm run $*'),
    nrin: new AliasDefault('npm --prefix=$1 run $2*'),
    ns: new AliasDefault('npm start $*'),
    nsin: new AliasDefault('npm --prefix=$1 start $2*'),
    nt: new AliasDefault('npm test $*'),
    ntin: new AliasDefault('npm --prefix=$1 test $2*'),
    yr: new AliasDefault('yarn run $*'),
    yrin: new AliasDefault('yarn --cwd=$1 run $2*'),
    ys: new AliasDefault('yarn start $*'),
    ysin: new AliasDefault('yarn --cwd=$1 start $2*'),
    yt: new AliasDefault('yarn test $*'),
    ytin: new AliasDefault('yarn --cwd=$1 test $2*'),

    // `suppressTbj` causes issues on Node.js v10.2.0+.
    // (Jobs do not exit without additional interaction; e.g. hitting ENTER or switching focus ¯\_(ツ)_/¯)
    nrx: new AliasDefault('npm run $*', {suppressTbj: true}),
    nsx: new AliasDefault('npm start $*', {suppressTbj: true}),
    ntx: new AliasDefault('npm test $*', {suppressTbj: true}),
    yrx: new AliasDefault('yarn run $*', {suppressTbj: true}),
    ysx: new AliasDefault('yarn start $*', {suppressTbj: true}),
    ytx: new AliasDefault('yarn test $*', {suppressTbj: true}),

    // SPECIAL
    srv: new AliasDefault('http-server "${1:.}" --port="4000" $2*'),
    srvw: new AliasDefault(
      'light-server --bind="localhost" --historyindex="/index.html" --serve="${1:.}" --watchexp="${1:.}/**" $2*',
      {suppressTbj: true}),
    naga: new AliasDefault(`npm install --global ${GLOBAL_NPM_PACKAGES.join(' ')} $*`),
    yaga: new AliasDefault(`yarn global add ${GLOBAL_NPM_PACKAGES.filter(x => !/^yarn(?:@|$)/.test(x)).join(' ')} $*`),
  },

  // Docker
  docker: {
    // AIO-BUILDS DOCKER STUFF
    dkrrm: new AliasDefault('docker stop $1 & docker rm $1 || true'),
    dkrbd: new AliasDefault('docker build --tag $1 $3* $2'),
    dkrrd: new AliasDefault(
      'docker run -d --name $1 -p 4000:4000 -p 4200:4200 -p 4433:4433 -p 8080:8080 -p 9876:9876 $3* $2'),
    dkratt: new AliasDefault('docker exec -it $1 /bin/bash $2*'),
    dkrall: new AliasDefault('dkrrm $1 && dkrbd $2 $3 && dkrrd $1 $2 $4* && dkratt $1'),
  },

  // angular.io
  aio: {
    // AIO-BUILDS DOCKER STUFF
    aiorm: new AliasDefault('dkrrm aio'),
    aiobd: new AliasDefault([
      'yarn --cwd "${0:::__a-builds-dir}/dockerbuild/scripts-js" --frozen-lockfile --non-interactive install',
      'yarn --cwd "${0:::__a-builds-dir}/dockerbuild/scripts-js" build',
      'dkrbd aio-builds "${0:::__a-builds-dir}/dockerbuild" $*',
    ].join(' && ')),
    aiord: new AliasDefault('dkrrd aio aio-builds --dns 127.0.0.1 -p 8000:80 -p 4430:443 $*'),
    aioatt: new AliasDefault('dkratt aio'),
    aioall: new AliasDefault('aiorm && aiobd && aiord && aioatt'),


    // PRIVATE
    '__a-builds-dir': SCRIPT_BACKED_ALIAS(
      'a-builds-dir', '[PRIVATE]: Return the absolute path to \'.../angular/aio/aio-builds-setup/\'.'),
  },

  // Env config
  config: {
    // BASH
    cfgbash: new Alias(new AliasSpec(
      /* eslint-disable max-len */
      utils.stripIndentation(`
        #!/usr/bin/env node
        'use strict';
        const utils = require('../../lib/utils');
        /* eslint-disable max-len */
        console.log(utils.stripIndentation(\`
          ### [Generated by: ${VERSION_STAMP}]
          ### Copy the following into '~/.bashrc':

          # Set up prompt.
          PS1='\\\\[\\\\033[90m\\\\][\\\\d \\\\t]\\\\[\\\\033[00m\\\\]\\\\n\\\${debian_chroot:+($debian_chroot)}\\\\[\\\\033[01;32m\\\\]\\\\u@\\\\h\\\\[\\\\033[00m\\\\]:\\\\[\\\\033[01;34m\\\\]\\\\w\\\\[\\\\033[00m\\\\]$ ';

          # Improve tab completion.
          bind "set completion-ignore-case on";
          bind "set menu-complete-display-prefix on";
          bind "set show-all-if-ambiguous on";
          bind "TAB:menu-complete";

        \`));
        /* eslint-enable max-len */

      `),
      /* eslint-enable max-len */
      'Show configuration instructions for `bash`.')),


    // GIT
    cfggit: new Alias({
      default: CFGGIT_SPEC_WITH_CRED_HELPER('store'),
      win32: CFGGIT_SPEC_WITH_CRED_HELPER('manager'),
      wsl: CFGGIT_SPEC_WITH_CRED_HELPER(
        '/mnt/c/Program\\\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe'),
    }),


    // VIM
    cfgvim: new Alias(new AliasSpec(
      utils.stripIndentation(`
        #!/usr/bin/env node
        'use strict';
        console.log('""" [Generated by: ${VERSION_STAMP}]');
        console.log('""" Copy the following into \\'~/.vimrc\\':\\n');
        console.log(require('fs').readFileSync(\`\${__dirname}/../../lib/assets/vimrc.txt\`, 'utf8').trim() + '\\n');
      `),
      'Show configuration instructions for `vim`.')),
  },

  // Misc
  misc: {
    // DIRECTORY LISTING
    ll: new Alias({
      default: new AliasSpecDefault('ls --color=auto -hl $*'),
      darwin: new AliasSpecDefault('ls -Ghl $*'),
    }),
    lla: new Alias({
      default: new AliasSpecDefault('ls --color=auto -ahl $*'),
      darwin: new AliasSpecDefault('ls -aGhl $*'),
    }),

    // OS VERSION
    osv: new Alias({
      default: new AliasSpecDefault('command -v lsb_release && lsb_release -a || cat /etc/os-release'),
      darwin: new AliasSpecDefault('sw_vers'),
      win32: new AliasSpecDefault('ver'),
    }),


    // SELF-UPDATE
    salfup: new AliasDefault(`npm install --global ${pkg.name} $*`),

    // VERSION
    alv: new Alias(new AliasSpec(
      utils.stripIndentation(`
        #!/usr/bin/env node
        'use strict';
        console.log('${VERSION_STAMP}');
      `),
      `Display the installed version of ${pkg.name}.`)),

    // HELP
    halp: new Alias(new AliasSpec(
      utils.stripIndentation(`
        #!/usr/bin/env node
        'use strict';
        require('../../lib/helper').help(...process.argv.slice(2));
      `),
      utils.stripIndentation(`
        Display this message. Variations:
        - Pass a category name to list aliases of the specified category only.
          (Example: \`halp node\`)
        - Pass one or more alias names to list only the specified aliases (if they exist).
          (Example: \`halp alv\`)
        - Pass a partial alias name suffixed with \`*\` to list all aliases that start with that value.
          (Example: \`halp grb*\`)
      `))),
  },
};

// Exports
module.exports = {
  ALIASES,
  BIN_DIR,
  DEF_CODE,
  DESC_REPLACEMENTS,
  ROOT_DIR,
  VERSION_STAMP,
};
